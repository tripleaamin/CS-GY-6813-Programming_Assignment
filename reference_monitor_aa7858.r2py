TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
EXCEPTION="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
	def __init__(self, filename, create):
		# globals
		mycontext['debug'] = False
		# local (per object) reference to the underlying file
		self.Afn = filename+'.a'
		self.Bfn = filename+'.b'
		self.Open = True
		self.new = False

		# make the file names add 'SE' to the readat file...
		if filename+".a" not in listfiles():
			self.new = True
		if create:
			self.Afile = openfile(self.Afn, create)
			self.Bfile = openfile(self.Bfn, create)
			if self.new:
				self.Afile.writeat('SE',0)
				self.Bfile.writeat('SE',0)
		else:
			if self.new is False:
				self.Afile = openfile(self.Afn, create)
				self.Bfile = openfile(self.Bfn, create)
		

	def writeat(self, data, offset):
		#Write the requested data to the B file using the sandbox's self.Bfile.writeat(data,offset)
		if offset > -1 and self.Open:
			s = self.Bfile.readat(None,0)
			length = len(s)
			if offset <= length:
				self.Bfile.writeat(data,offset)

	def readat(self, bytes, offset):
		#Read from the A file using the sandbox's readat...
		if offset > -1 and self.Open:
			try:
				return self.Afile.readat(bytes, offset)
			except SeekPastEndOfFileError:
				return ""
		else:
			return ""

	def close(self):
		if self.Open:
			if 'S' == self.Bfile.readat(1,0) and 'E' == self.Bfile.readat(1,len(self.Bfile.readat(None,0))-1):
				self.Afile.writeat(self.Bfile.readat(None, 0),0)
			self.Afile.close()
			self.Bfile.close()
			self.Open = False

def ABopenfile(filename, create):
	return ABFile(filename, create)
	
		

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
"name":"ABFile",
"writeat":{"type":"func","args":(str,(int,long)),"exceptions":EXCEPTION,"return":(int,type(None)),"target":ABFile.writeat},
"readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
"close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
}

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
